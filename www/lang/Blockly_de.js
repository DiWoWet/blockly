'use strict';
goog.provide ( 'Blockly.Msg.fr');
goog.require ( 'Blockly.Msg');

Blockly.Msg.INOUT_HIGH_LEVEL = "1(high)"; //1(high state)
Blockly.Msg.INOUT_LOW_LEVEL = "0(low)"; //0(low state)
Blockly.Msg.ARD_TYPE_CHAR = "Zeichen"; //character
Blockly.Msg.ARD_TYPE_TEXT = "Text"; //text
Blockly.Msg.ARD_TYPE_BOOL = "Bin√§r"; //binary
Blockly.Msg.ARD_TYPE_SHORT = "Byte"; //byte
Blockly.Msg.ARD_TYPE_NUMBER = "Ganzzahl"; //integer
Blockly.Msg.ARD_TYPE_UNUMBER = "Vorzeichenlose Ganzzahl"; //unsigned integer
Blockly.Msg.ARD_TYPE_LONG = "Lange Ganzzahl"; //long integer
Blockly.Msg.ARD_TYPE_DECIMAL = "Gleitkommazahl"; //floating point number
Blockly.Msg.ARD_TYPE_ARRAY = "Feld"; //array
Blockly.Msg.ARD_TYPE_NULL = "leer"; //empty
Blockly.Msg.ARD_TYPE_UNDEF = "nicht definiert"; //not defined
Blockly.Msg.ARD_TYPE_VOLATILE = "unberechenbare Ganzzahl"; //volatile integer 
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "Angabe auf Block fehlt"; //typing missing on a block
Blockly.Msg.ARDUINO_BETWEEN = "beliebige Zahl zwischen"; //random number between
Blockly.Msg.ARDUINO_BETWEEN_AND = "und"; //and
Blockly.Msg.ARDUINO_VAR_DECLARE="states"; //states
Blockly.Msg.ARDUINO_VAR_AS = "als"; //as
Blockly.Msg.ARDUINO_VAR_VAL = "des Wertes"; //of value
Blockly.Msg.base_def_const = "setze"; //set
Blockly.Msg.base_define_const = "ist gleich"; //which is equivalent to
Blockly.Msg.base_define_const_tooltip = "erlaubt es dem Programmierer jedem Wert einen Namen zu geben"; //allows the programmer to give a name to any value
Blockly.Msg.type = "setze einen Wert als ausgew√§hlten Typ"; //set a value as the selected type
Blockly.Msg.ADD_COMMENT = "Kommentar hinzuf√ºgen"; //Add a comment
Blockly.Msg.CHANGE_VALUE_TITLE = "√Ñndere Wert:"; //Change value
Blockly.Msg.CLEAN_UP = "Bereinige Bl√∂cke"; //Clean Blocks
Blockly.Msg.COLLAPSE_ALL = "Reduziere Bl√∂cke"; //Reduce Blocks
Blockly.Msg.COLLAPSE_BLOCK = "Reduziere Block"; //Reduce Block
Blockly.Msg.CONTROLS_SWITCH_VAR_TITLE = "W√§hrend"; //While
Blockly.Msg.CONTROLS_SWITCH_MSG_DEFAULT = "vorgegeben"; //default
Blockly.Msg.CONTROLS_SWITCH_MSG_CASEBREAK = "ist"; //is
Blockly.Msg.CONTROLS_SWITCH_MSG_SWITCHVAR = "falls der Wert g√ºltig ist"; //if the variable is valid
Blockly.Msg.CONTROLS_SWITCH_MSG_DO = "mache"; //do
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_1 = "Falls ein Wert wahr ist, f√ºhre die folgenden Befehle aus"; //If a value is true then execute the following commands
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_2 = "Falls der Wert wahr ist, f√ºhre den ersten Block an Befehlen aus, andernfalls f√ºhre den n√§chsten Block an Befehlen aus."; // If a value is true then execute the first block of commands, otherwise execute the next block of commands
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_3 = "Falls der Wert wahr ist, f√ºhre den ersten Block an Befehlen aus, andernfalls f√ºhre den n√§chsten Block an Befehlen aus falls die Bedingung wahr ist."; // If a value is true then execute the first block of commands, otherwise execute the next block of commands if the condition is true
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_4 = "Falls der Wert wahr ist, f√ºhre den ersten Block an Befehlen aus, andernfalls f√ºhre den n√§chsten Block an Befehlen aus falls die Bedingung wahr ist. Wenn keine Bedingung zutrifft, f√ºhre den vorgegebenen Befehlsblock aus." ; // If a value is true then execute the first block of commands, else execute the next block of commands if the condition is true.If no condition is satisfied, then make the default command block.
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "Verlasse die Schleife"; //exit the loop
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "Gehe zum n√§chsten Schritt"; // move to the next iteration
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Verlasse diese Schleife"; // Exit this loop
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "√úberspringe den Rest der Schleife und fahre fort mit der n√§chsten Iteration"; // Skip the rest of this loop, and continue with the next iteration
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warnung: Dieser Block muss in einer Schleife verwendet werden!"; // Warning: This block must be used in a loop
Blockly.Msg.CONTROLS_FOREACH_TITLE = "f√ºr jedes Item %1 in der Liste %2"; // for each item %1 in list %2
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "F√ºr jedes Item in einer Liste, schreibe den Wert des Item in die Variable %1, und f√ºhre dann die statements aus"; // For each item in a list, assign the value of the item to variable %1, and then execute statements
Blockly.Msg.CONTROLS_FOR_TITLE = "f√ºr %1 von %2 bis %3 in %4 er Schritten"; // for %1 ranging from %2 to %3 in steps of %4
Blockly.Msg.CONTROLS_FOR_TITLE2 = "f√ºr %1 von %2 bis %3 (>=)in %4 er Schritten"; // for %1 ranging from %2 to %3 (>=)in steps of %4
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Set variable %1 to values ‚Äã‚Äãfrom start number to end number, incrementing by specified step, and execute the specified statements"; // Set variable %1 to values ‚Äã‚Äãfrom start number to end number, incrementing by specified step, and execute the specified statements
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "F√ºge Bedingung hinzu"; // Add Condition 
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "F√ºge eine finale Bedingung hinzu"; // Add a final condition
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "F√ºge hinzu, l√∂sche oder sortiere neu"; // Add, delete or reorder
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "andernfalls"; // else
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "falls nicht"; // if not
Blockly.Msg.CONTROLS_IF_MSG_IF = "falls"; // if
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Wenn ein Wert wahr ist, dann f√ºhre einige Befehle aus."; // If a value is true, then execute some orders
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Falls der Wert wahr ist, f√ºhre den ersten Block an Befehlen aus, andernfalls f√ºhre den zweiten Block an Befehlen aus."; // If a value is true, then execute the first block of orders, otherwise execute the second block of orders
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Falls der Wert wahr ist, f√ºhre den ersten Block an Befehlen aus, andernfalls, falls der zweite Wert wahr ist, f√ºhre den zweiten Befehlsblock aus."; // If the first value is true, then execute the first block of orders, otherwise, if the second value is true, execute the second block of orders
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Falls der Wert wahr ist, f√ºhre den ersten Block an Befehlen aus, andernfalls, falls der zweite Wert wahr ist, f√ºhre den zweiten Befehlsblock aus. Falls keiner der Werte wahr ist, f√ºhre den letzten Befehlsblock aus."; // If the first value is true, then execute the first block of orders, otherwise, if the second value is true, execute the second block of orders.If none of the values ‚Äã‚Äãare true, execute the last block of orders
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "mache"; // do
Blockly.Msg.CONTROLS_REPEAT_TITLE = "üîÅ wiederhole %1 Mal"; //üîÅ repeat %1 time
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Wiederhole eine Sequenz mehrere Male"; // Run statements multiple times
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "Wiederhole bis"; // repeat up
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "Wiederhole solange, wie"; // repeat as long as
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Solange ein Wert falsch ist, f√ºhre Befehle aus." //As long as a value is false, then execute instructions
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Solange ein Wert wahr ist, f√ºhre Befehle aus."; // As long as a value is true, then execute instructions
Blockly.Msg.DELETE_ALL_BLOCKS = "Diese %1 Bl√∂cke l√∂schen?"; // Delete these %1 blocks?
Blockly.Msg.DELETE_BLOCK = "Block l√∂schen."; // Delete block
Blockly.Msg.DELETE_VARIABLE = "L√∂sche Variable %1"; // Delete variable %1
Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Remove %1 uses of variable%2?"; // Remove %1 uses of variable%2?
Blockly.Msg.DELETE_X_BLOCKS = "L√∂sche %1 Bl√∂cke"; // Delete%1 blocks
Blockly.Msg.DISABLE_BLOCK = "Block deaktivieren"; // Disable block
Blockly.Msg.DUPLICATE_BLOCK = "Duplizieren"; // Duplicate
Blockly.Msg.ENABLE_BLOCK = "Block aktivieren"; // Activate Block
Blockly.Msg.EXPAND_ALL = "Bl√∂cke erweitern"; // Expand Blocks
Blockly.Msg.EXPAND_BLOCK = "Block erweitern"; // Expand block
Blockly.Msg.EXTERNAL_INPUTS = "Externe Inputs"; // External Inputs
Blockly.Msg.HELP = "Hilfe"; // Help
Blockly.Msg.INLINE_INPUTS = "Online Eintr√§ge"; // Online Entries
Blockly.Msg.LISTS_CREATE1 = "Erzeuge eine Liste"; //  create a list
Blockly.Msg.LISTS_CREATE2 = "mit"; // with
Blockly.Msg.LISTS_CREATE_TOOLTIP = "Erzeuge eine Liste mit der gew√ºnschten Anzahl an Items"; // Create a list with the desired number of items
Blockly.Msg.LISTS_append = 'f√ºge %1 am Ende von %2 hinzu'; // add %1 at the end of %2
Blockly.Msg.LISTS_append_TOOLTIP = 'F√ºge ein Item am Ende der Liste hinzu'; // add an item at the end of the list
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "Liste"; // list
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Hinzuf√ºgen, l√∂schen oder neu sortieren"; // Add, Delete, or Reorder
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "Erzeuge eine Liste mit"; // create a list with
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "F√ºge ein Item hinzu"; // Add an item
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Gibt ein Feld oder eine Liste mit einer beliebigen Anzahl von Elementen aus."; // returns an array or list with any number of elements
Blockly.Msg.LISTS_GET = "das Element"; // the element
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# vom Ende aus"; // # since the end
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#"; // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "Hole"; // Get
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "hole und l√∂sche"; // get and delete
Blockly.Msg.LISTS_GET_INDEX_LAST = "letzte/-r"; // last
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "beliebig"; // random
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "l√∂sche"; // delete
Blockly.Msg.LISTS_GET_INDEX_TAIL = ""; // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Gibt das erste Item in einer Liste aus."; // returns the first item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Gibt das Item an einer bestimmten Stelle in einer Liste aus."; // returns the item to the specified position in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Gibt das letzte Item in einer Liste aus."; // return the last item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Gibt ein beliebiges Item in einer Liste aus."; // returns a random item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Gibt das erste Item in einer Liste aus und l√∂scht es."; // Deletes and returns the first item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Gibt das Item an einer bestimmten Stelle in einer Liste aus und l√∂scht es."; // Deletes and returns the item at the specified position in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Gibt das letzte Item in einer Liste aus und l√∂scht es."; // Deletes and returns the last item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Gibt ein beliebiges Item in einer Liste aus und l√∂scht es."; // Deletes and returns a random item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "L√∂scht das erste Item in einer Liste."; //Deletes the first item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "L√∂scht ein bestimmtes Item an einer bestimmten Position in einer Liste."; //
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Deletes the last item in a list"; //Deletes the last item in a list
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Deletes a random item from a list"; //Deletes a random item from a list
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "until # since the end"; //until # since the end
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "bis #"; //up to #
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "bis zum Ende"; //until the end
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "hole die Teilliste vom Anfang"; //get the sublist from the beginning
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "hole die Teilliste von # vom Ende aus"; //get the sublist from # since the end
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "hole die Teilliste von #"; //get the sublist from #
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = ""; // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Erstellt eine Kopie eines gegebenen Teiles einer Liste"; //Creates a copy of the specified part of a list
Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 ist das letzte Element"; //%1 is the last element
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 ist das erste Element"; //%1 is the first item
Blockly.Msg.LISTS_INDEX_OF_FIRST = "finde das erste Aufkommen des Elements"; //find the first instance of the item
Blockly.Msg.LISTS_INDEX_OF_LAST = "finde das letzte Aufkommen des Elements"; //find the last instance of the item
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "returns the index of the first / last occurrence of the item in the list, returns%1 if the item is not found"; //returns the index of the first / last occurrence of the item in the list, returns%1 if the item is not found
Blockly.Msg.LISTS_INLIST = "in der Liste"; //in the list
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 ist leer"; //%1 is empty
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "wird als wahr ausgegeben, falls die Liste leer ist"; //returns true if the list is empty
Blockly.Msg.LISTS_LENGTH_TITLE = "L√§nge von %1"; //length of %1
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "gibt die L√§nge einer Liste aus"; //returns the length of a list
Blockly.Msg.LISTS_REPEAT_TITLE = "erstelle eine Liste mit dem Element %1 welches %2 Mal wiederholt wird"; //create a list with the item%1 repeated%2 times
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Create a list consisting of the supplied value repeated the specified number of times"; //Create a list consisting of the supplied value repeated the specified number of times
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "wie"; //like
Blockly.Msg.LISTS_of = "von"; //of
Blockly.Msg.LISTS_SET_INDEX_SET = "lege das Element"; //put the element
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the beginning of a list"; //Inserts the item at the beginning of a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Inserts the item at the position specified in a list"; //Inserts the item at the position specified in a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Add item at the end of a list"; //Add item at the end of a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item at random into a list"; //Inserts the item at random into a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Fix the first item in a list"; //Fix the first item in a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Update the item to the specified position in a list"; //Update the item to the specified position in a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Fix the last item in a list"; //Fix the last item in a list
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Fix a random element in a list"; //Fix a random element in a list
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falsch"; //false
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Gibt einen 0 oder 1 logischen Zustand aus."; //returns a 0 or 1 logical state
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "wahr"; //true
Blockly.Msg.compare = "wird als wahr ausgegeben, wenn ein Wert Teil eines Intervalls ist"; //returns true if a value is in an interval
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "wird als wahr ausgegeben, wenn beide Eintr√§ge gleich sind"; //returns true if both entries are equal
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "wird als wahr ausgegeben, wenn der erste Eintrag gr√∂√üer als der zweite Eintrag ist"; //returns true if the first entry is greater than the second
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "wird als wahr ausgegeben, wenn der erste Eintrag gr√∂√üer oder gleich dem zweiten Eintrag ist"; //returns true if the first entry is greater than or equal to the second
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "wird als wahr ausgegeben, wenn der erste Eintrag kleiner als der zweite Eintrag ist"; //returns true if the first entry is smaller than the second
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "wird als wahr ausgegeben, wennd der erste Eintrag kleiner oder gleich dem zweiten Eintrag ist"; //returns true if the first entry is smaller or equal to the second
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "wird als wahr ausgegeben, wenn beide Eintr√§ge verschieden sind"; //returns true if the two entries are different
Blockly.Msg.LOGIC_NEGATE_TITLE = "nicht %1"; //not %1
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "returns true if the entry is false, returns false if the entry is true"; //
Blockly.Msg.LOGIC_NULL = "null"; //
Blockly.Msg.LOGIC_NULL_TOOLTIP = "returns null"; //
Blockly.Msg.LOGIC_OPERATOR = [["und", "and"], ["oder", "or"], ["ausschlie√üendes oder", "xor"], ["left shift", "shiftL"], ["right shift", "shiftR"]]; //
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "returns true if both entries are true"; //
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "returns true if at least one of the entries is true"; //
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_xor = "returns true if only one of the entries is true"; //
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_shiftR = "shifts to the right \ n"; //
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_shiftL = "makes a left shift"; //
Blockly.Msg.LOGIC_TERNARY_CONDITION = "Test"; //test
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "Falls falsch"; //if false
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "Falls richtig"; //if true
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test' If it is true, return the value 'if true', else return the value 'if false'"; //
Blockly.Msg.MATH_ADDITION_SYMBOL = "+"; // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "returns the sum of the two numbers"; //
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "returns the quotient of the two numbers"; //
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "returns the difference of the two numbers"; //
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "returns the product of the two numbers"; //
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "returns the first number raised to the power of the second"; //
Blockly.Msg.MATH_CHANGE_TITLE = "Erh√∂he Variable %1 um %2"; //increment variable %1 of %2
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to the variable %1"; //
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "returns one of the current constants: œÄ (3.141 ...), e (2.718 ...), œÜ (1.618 ...), sqrt (2) (1.414 ...), sqrt (¬Ω) (0.707 ...), or ‚àû (infinite) "; //
Blockly.Msg.MATH_CONSTRAIN_TITLE = "Erzwinge %1 zwischen %2 und %3"; //
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified (included) limits"; //
Blockly.Msg.MATH_DIVISION_SYMBOL = "√∑"; // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "ist teilbar durch"; //is divisible by
Blockly.Msg.MATH_IS_EVEN = "ist gerade"; //is even
Blockly.Msg.MATH_IS_NEGATIVE = "ist negativ"; //is negative
Blockly.Msg.MATH_IS_ODD = "ist ungerade"; //is odd
Blockly.Msg.MATH_IS_POSITIVE = "ist positiv"; //is positive
Blockly.Msg.MATH_IS_PRIME = "ist eine Primzahl"; //
Blockly.Msg.MATH_IS_TOOLTIP = "returns true or false if a number is even, odd, prime, integer, positive, negative, or if it is divisible by a number"; //
Blockly.Msg.MATH_IS_WHOLE = "ist eine Ganzzahl"; //is integer
Blockly.Msg.MATH_MODULO_TITLE = "Modulo %1 √∑%2"; //remainder
Blockly.Msg.MATH_MODULO_TOOLTIP = "returns the rest of the Euclidean division of the two numbers"; //
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "√ó"; // untranslated
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Eine Zahl"; //A number
Blockly.Msg.MATH_ONLIST_HELPURL = ""; // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "Listendurchschnitt"; //list average
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "Maximum der Liste"; //maximum of the list
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "Median der Liste"; //median of the list
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "Minimum der Liste"; //minimum of the list
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "Mehrheit der Liste"; //majority of the list
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "beliebiges Element der Liste"; //random element of the list
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "Standardabweichng der Liste"; //standard deviation of the list
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "Summe der Liste"; //sum of the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Returns the average (arithmetic) numeric values ‚Äã‚Äãin the list"; //Returns the average (arithmetic) numeric values ‚Äã‚Äãin the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "returns the largest number in the list"; //returns the largest number in the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "returns the median number of the list"; //returns the median number of the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "returns the smallest number in the list"; //returns the smallest number in the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "returns a list of the most common element (s) in the list"; //returns a list of the most common element (s) in the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "returns an item in the random list"; //returns an item in the random list
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "returns the standard deviation of the list"; //returns the standard deviation of the list
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "returns the sum of all the numbers in the list"; //returns the sum of all the numbers in the list
Blockly.Msg.MATH_POWER_SYMBOL = "^"; // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "beliebiger Bruchteil"; //random fraction
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "returns a random fraction between 0.0 (inclusive) and 1.0 (excluded)"; //returns a random fraction between 0.0 (inclusive) and 1.0 (excluded)
Blockly.Msg.MATH_RANDOM_INT_TITLE = "zuf√§llige Ganzzahl zwischen %1 & %2"; //random integer%1 & %2
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "returns a random integer between the two specified, included limits"; //returns a random integer between the two specified, included limits
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "runde"; //round
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "runde ab"; //round down
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "runde auf"; //round up
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number above or below"; //Round a number above or below
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluter Wert"; //absolute value
Blockly.Msg.MATH_SINGLE_OP_ROOT = "Quadratwurzel"; //square root
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "returns the absolute value of a number"; //
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "returns e to the power of a number"; //
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "returns the natural logarithm of a number"; //
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "returns the base 10 logarithm of a number"; //
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "returns the opposite of a number"; //
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "returns 10 to the power of a number"; //
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "returns the square root of a number"; //
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-"; // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos"; // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin"; // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan"; // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos"; // untranslated
Blockly.Msg.MATH_TRIG_SIN = "sin"; // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan"; // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "returns the arccosinus of a number"; //
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "returns the arcsine of a number"; //
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "returns the arctangent of a number"; //
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "returns the cosine of an angle in degrees"; //
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "returns the sine of an angle in degrees"; //
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "returns the tangent of an angle in degrees"; //
Blockly.Msg.NEW_VARIABLE = "Erstelle eine Variable"; //Create a variable
Blockly.Msg.NEW_VARIABLE_TITLE = "Neuer Variablenname"; //New name of the variable
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = ""; // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Execute user-defined %1 function"; //Execute user-defined %1 function
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Execute user-defined function%1 and use its result"; //Execute user-defined function%1 and use its result
Blockly.Msg.PROCEDURES_CREATE_DO = "Erstelle %1"; //Create %1
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Beschreibe diese Funktion"; //Describe this function
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = ""; //
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "mache"; //do
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = ""; //
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Create a procedure or function without data return"; //Create a procedure or function without data return
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "Ausgabe"; //return
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Create a procedure or function with a data return"; //Create a procedure or function with a data return
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warnung: Diese Funktion beinhaltet sich √ºberlagernde Einstellungen."; //Warning: This function has duplicate settings
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Hebe die Definition der Funktion hervor"; //Highlight the function definition
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "returns the specified value"; //returns the specified value
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block must be used in a procedure or function definition"; //Warning: This block must be used in a procedure or function definition
Blockly.Msg.PROCEDURES_MUTATORARG_TYPE = "vom Typ"; //of type
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an entry to the procedure or function"; //Add an entry to the procedure or function
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "Eingabeparameter"; //input arguments
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Hinzuf√ºgen, l√∂schen oder neu anordnen"; //Add, delete, or rearrange
Blockly.Msg.REDO = "Wiederhole"; //Redo
Blockly.Msg.REMOVE_COMMENT = "L√∂sche ein Kommentar"; //Delete a comment
Blockly.Msg.RENAME_VARIABLE = "Benenne Variable '%1' um"; //Rename variable '%1'
Blockly.Msg.RENAME_VARIABLE_TITLE = "Benenne Variablen '%1' um"; //Rename variables '%1'
//Array
Blockly.Msg.ARRAY_CREATE_EMPTY_TITLE = 'Leer!'; //empty!
Blockly.Msg.tab_create = "Erstelle Block 'Element von Feld %1'"; //Create block 'element of array %1'
Blockly.Msg.tab_create_fix = "Erstelle Block 'Lege ein Element von Feld %1 nach '"; //Create Block 'put an element from array %1 to '
Blockly.Msg.ARRAY_CREATE_WITH = "bestehend aus"; //made up of
Blockly.Msg.ARRAY_taille = "Gr√∂√üe"; //size
Blockly.Msg.ARRAY_contenu = "welches enth√§lt"; //which contains
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD = "Liste oder Feld"; //list or array
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP = "Hinzuf√ºgen, l√∂schen oder neu anordnen"; //Add, Delete, or Reorder
Blockly.Msg.ARRAY_CREATE_WITH_INPUT_WITH = "Elemente"; //elements
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE = "Element"; //element
Blockly.Msg.ARRAY_CREATE_WITH_TOOLTIP = "Returns a list with a number of items"; //Returns a list with a number of items
Blockly.Msg.ARRAY_GETINDEX_ITEM = "das Element des Feldes"; //the element of the array
Blockly.Msg.ARRAY_GETINDEX_ITEM2 = "Feld"; //array
Blockly.Msg.ARRAY_GETINDEX_TOOLTIP1 = "returns the value stored in the list"; //returns the value stored in the list
Blockly.Msg.ARRAY_GETINDEX_TOOLTIP2 = "created an array of the selected type"; // created an array of the selected type
Blockly.Msg.ARRAY_GETINDEX_TOOLTIP3 = "fix an element of the list or array to the indicated value"; //fix an element of the list or array to the indicated value
Blockly.Msg.ARRAY_create = "Erstelle Feld"; //set array
Blockly.Msg.ARRAY_fixe = "lege das Element des Feldes"; //put the element of the array
Blockly.Msg.ARRAY_dim = "Gr√∂√üe von"; //size of
Blockly.Msg.ARRAY_index = "Index"; //index
Blockly.Msg.ARRAY_append_tooltip = "add an item at the end of the list or array"; //add an item at the end of the list or array
Blockly.Msg.ARRAY_append_url = ""; //
Blockly.Msg.size = "Feldgr√∂√üe"; //array size
Blockly.Msg.size_TOOLTIP = "Gibt die Gr√∂√üe der Liste oder des Feldes aus"; //returns the size of the list or array

//text
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "F√ºge ein Item hinzu"; //Add an item
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "Text"; //text
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Hinzuf√ºgen, l√∂schen oder neu sortieren.";//Add, Delete, or Reorder
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 ist leer"; //%1 is empty
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Gibt *wahr* aus, falls der gegebene Text leer ist."; //returns true if the supplied text is empty
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "Text erstellt mit"; //text created with
Blockly.Msg.TEXT_JOIN_TOOLTIP = "returns a text aggregating any number of elements"; //returns a text aggregating any number of elements
Blockly.Msg.TEXT_LENGTH_TITLE = "L√§nge von %1"; //length of %1
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "returns the number of letters (including spaces) of the supplied text"; //
Blockly.Msg.TEXT_PRINT_TITLE = "zeige %1"; //show %1
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Zeige Text, Nummer oder spezifizierten Wert"; //Show text, number or other specified value
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Ein Buchstabe, ein Wort oder ein Satz."; //A letter, a word or a phrase
Blockly.Msg.TODAY = "heute"; //Today
Blockly.Msg.UNDO = "Abbrechen"; //Cancel
Blockly.Msg.VARIABLES_AS = "Typ"; //type
Blockly.Msg.VARIABLES_DEFAULT_NAME = "var"; //var
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Erzeuge Block 'Setze Variable %1 auf '"; //Create block 'set variable %1 to '
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Gebe den Wert dieser Variable aus."; //returns the value of this variable
Blockly.Msg.VARIABLES_SET = "Setze die Variable"; //put the variable
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Erzeuge Block %1"; //Create block %1
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Setze die Variable auf den spezifizierten Wert"; //Set the variable to the specified value
Blockly.Msg.var_set_init = "Setze Variable"; //set variable
Blockly.Msg.var_set_init_tooltip = "Deklariere und initialisiere die Variable des Typs und mit dem Wert."; //Declare and initialize the variable of the specified type and value
Blockly.Msg.ARDUINO_VAR_CONST = "Setze Konstante"; //set constant
Blockly.Msg.ARDUINO_VAR_CONST_tooltip = "Deklariert eine Konstante eines spezifischen Typs und Werts."; //Declares a constant of the specified type and value
Blockly.Msg.VARIABLE_ALREADY_EXISTS = "Eine Variable mit dem Namen %1 gibt es bereits."; //A variable called %1 already exists
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = ""; //
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF; 
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO; 
Blockly.Msg.CONTROLS_IF_MSG_THEN = "dann"; //then
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;
